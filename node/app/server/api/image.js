// Generated by LiveScript 1.2.0
(function(){
  var async, database, exec, fs, request, queryFlickr;
  async = require("async");
  database = require("./../database");
  exec = require("child_process").exec;
  fs = require("fs");
  request = require("request");
  queryFlickr = function(query, callback){
    var flickrKey, flickrSecret, flickrUrl;
    query = query + " view";
    flickrKey = "7925109a48c26fe53555687f9d46a076";
    flickrSecret = "c936db59c720b4d5";
    flickrUrl = "http://api.flickr.com/services/rest/?per_page=5&sort=relevance&format=json&content_type=1&nojsoncallback=1&method=flickr.photos.search&api_key=" + flickrKey + "&text=" + query;
    return request(flickrUrl, function(error, response, body){
      var json, randomIndex, photo, url;
      console.log(">>> queried flickr search | " + flickrUrl + " | error: " + error + " | status " + (response != null ? response.statusCode : void 8));
      if (error || !(response.statusCode === 200)) {
        return;
      }
      json = JSON.parse(response.body);
      randomIndex = Math.floor(Math.random() * (json.photos.photo.length - 1));
      photo = json.photos.photo[randomIndex];
      if (photo) {
        url = "http://farm" + photo.farm + ".staticflickr.com/" + photo.server + "/" + photo.id + "_" + photo.secret + ".jpg";
        console.log(url);
        return callback(null, url);
      }
      return callback({
        message: 'nothing found'
      }, null);
    });
  };
  exports.image_v2 = function(req, res){
    var country, city, shutterstockPath, shutterstockBlured, shutterstockSharp;
    country = encodeURIComponent(req.params.country.replace(/ /g, "_").toLowerCase());
    city = encodeURIComponent(req.params.city.replace(/ /g, "_").toLowerCase());
    shutterstockPath = "./public/img/cities/custom/" + country + "--" + city + "-blured.jpg";
    shutterstockBlured = "/img/cities/custom/" + country + "--" + city + "-blured.jpg";
    shutterstockSharp = "/img/cities/custom/" + country + "--" + city + "-resized.jpg";
    return fs.exists(shutterstockPath, function(shutterstockExits){
      var flickrPath, flickrBlured, flickrSharp;
      if (shutterstockExits) {
        return res.json({
          status: 'ok',
          value: {
            blured: shutterstockBlured,
            sharp: shutterstockSharp
          }
        });
      }
      flickrPath = "./public/img/cities/flickr/" + country + "--" + city + "-blured.jpg";
      flickrBlured = "/img/cities/flickr/" + country + "--" + city + "-blured.jpg";
      flickrSharp = "/img/cities/flickr/" + country + "--" + city + "-resized.jpg";
      return fs.exists(flickrPath, function(flickrExits){
        if (flickrExits) {
          return res.json({
            status: 'ok',
            value: {
              blured: flickrBlured,
              sharp: flickrBlured
            }
          });
        }
        return queryFlickr(city, function(error, image){
          var origFile, resizedFile, bluredFile;
          if (error) {
            return res.json({
              status: 'error',
              message: error
            });
          }
          origFile = "./public/img/cities/flickr/" + country + "--" + city + "-orig.jpg";
          resizedFile = "./public/img/cities/flickr/" + country + "--" + city + "-resized.jpg";
          bluredFile = "./public/img/cities/flickr/" + country + "--" + city + "-blured.jpg";
          return exec("wget " + image + " -O " + resizedFile, function(error, result){
            if (error) {
              exec("rm " + origFile);
              return res.json({
                status: 'error',
                message: error
              });
            }
            return fs.stat(resizedFile, function(error, stat){
              if (stat.size === 9218) {
                return res.json({
                  status: 'error',
                  message: error
                });
              }
              return exec("convert " + resizedFile + " -blur 0x3 -quality 0.6 " + bluredFile, function(error, result){
                return res.json({
                  status: 'ok',
                  value: {
                    blured: flickrBlured,
                    sharp: flickrBlured
                  }
                });
              });
            });
          });
        });
      });
    });
  };
}).call(this);
